generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// üë§ USER
//
model User {
  id        Int        @id @default(autoincrement())
  name      String?
  email     String?    @unique
  image     String?
  emailVerified  DateTime?
  createdAt DateTime   @default(now())

  // ‚úÖ relasi ke fitur autentikasi (NextAuth)
  accounts  Account[]
  sessions  Session[]

  // ‚úÖ relasi ke fitur chat
  chats     Chat[]
  mentions  Mention[]  @relation("UserMentions")
}

//
// üí¨ CHAT
//
model Chat {
  id         Int         @id @default(autoincrement())
  message    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?   // null = pesan aktif

  user       User        @relation(fields: [userId], references: [id])
  userId     Int

  replyTo    Chat?       @relation("ChatReplies", fields: [replyToId], references: [id])
  replyToId  Int?
  replies    Chat[]      @relation("ChatReplies")

  mentions   Mention[]
}

//
// üè∑Ô∏è MENTION
//
model Mention {
  id          Int       @id @default(autoincrement())
  chat        Chat      @relation(fields: [chatId], references: [id])
  chatId      Int

  mentioned   User      @relation("UserMentions", fields: [mentionedId], references: [id])
  mentionedId Int

  readAt      DateTime?
  createdAt   DateTime  @default(now())
}

//
// üîê NEXTAUTH MODELS
//

model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
